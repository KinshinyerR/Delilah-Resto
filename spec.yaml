openapi: 3.0.0
info:
  title: Delilah restó API
  description: This is an API project for Acamica Fullstack - 2021.
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: users
    description: Everything about the Users
  - name: products
    description: Everything about the Products
  - name: orders
    description: Everything about the Orders

paths:
  ############ USERS ##############
  /users/register:
    post:
      tags:
        - users
      summary: Create a user
      description: Registration form for users
      operationId: create
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              type: object
            example:
                user: username
                name: FirstName SecondName
                surname: LastName
                email: example@example.com
                password: password
                phone: 123456789
                address: Medellin
      responses:
        '200':
          description: Register Successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    default: Usuario registado con exito
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: string
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: Login form for users
      operationId: login
      requestBody:
        required: true
        description: User information
        content:
          application/json:
            schema:
              example:
                user: username
                password: password
            examples:
              username:
                value:
                  user: username
                  password: password
              email:
                value:
                  email: example@example.com
                  password: password
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example:
                  token: jwt
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: string
  /users/all:
    get:
      tags:
        - users
      summary: Returns a list of users.
      description: Get all users from Delilah Restó
      operationId: all
      security: 
        - tokenAuth: []
      responses:
        '200':   
          description: A JSON array of users
          content:
            application/json:
              example:
                - id: 1
                  user: admin
                  name: Admin name
                  surname: Admin surname
                  email: admin@example.com
                  phone: 123 456 789
                  address: Address user
                  role: admin
                - id: 2
                  user: user
                  name: User name
                  surname: User surname
                  email: user@example.com
                  phone: 123 456 789
                  address: Address user
                  role: user
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: string 
  /users/getbyid/{userId}:
    get:
      tags:
        - users
      summary: Returns a user by ID
      description: Get a user from Delilah Restó
      operationId: getbyid
      security: 
        - tokenAuth: []
      parameters:
        - name: userId
          in: path
          description: The ID that needs to be fetched. Only admin role can access to this route
          required: true
          schema:
            type: string
      responses:
        '200':   
          description: A JSON of user
          content:
            application/json:
              example:
                  id: 1
                  user: admin
                  name: Admin name
                  surname: Admin surname
                  email: admin@example.com
                  phone: 123 456 789
                  address: Address user
                  role: admin
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: string 
  /users/update/{userId}:
    put:
      tags:
        - users
      summary: Updated user
      description: Update a user from Delilah Restó
      operationId: update
      security: 
        - tokenAuth: []
      parameters:
        - name: userId
          in: path
          description: userId that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              example:
                user: username
                name: FirstName LastName
                surname: LastName
                email: example@example.com
                password: password
                phone: 123456789
                address: Medellin
            examples:
              all of user:
                value:
                  user: username
                  name: FirstName LastName
                  surname: LastName
                  email: example@example.com
                  password: password
                  phone: 123456789
                  address: Medellin
              email:
                value:
                  email: example@example.com
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: string 
        '401':
          description: Bad Request
          content:
            application/json:
              example:
                msg: Unauthorized - No token provided
  /users/delete/{userId}:
    delete:
      tags:
        - users
      summary: Deleted user
      description: Delete a user from Delilah Restó
      operationId: delete
      security: 
        - tokenAuth: []
      parameters:
        - name: userId
          in: path
          description: The userId that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: string 
        '401':
          description: Bad Request
          content:
            application/json:
              example:
                msg: Unauthorized - No token provided
components:
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: x-auth-token
      description: JWT
